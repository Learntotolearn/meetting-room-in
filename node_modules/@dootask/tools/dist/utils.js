"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeDataListener = exports.addDataListener = exports.selectUsers = exports.callExtraA = exports.requestAPI = exports.openAppPage = exports.openTabWindow = exports.openWindow = exports.popoutWindow = exports.nextZIndex = exports.interceptBack = exports.backApp = exports.closeApp = exports.methods = exports.getLanguageName = exports.getLanguageList = exports.isSubElectron = exports.isMainElectron = exports.isElectron = exports.isEEUIApp = exports.getWindowType = exports.getSystemInfo = exports.getBaseUrl = exports.getUserInfo = exports.getUserToken = exports.getUserId = exports.getThemeName = exports.props = exports.getAppData = exports.isMicroApp = exports.appReady = void 0;
// 存储微应用数据
var microAppData = null;
var microAppReady = false;
// 备用z-index值，当无法从主应用获取nextZIndex时使用
var zIndexMissing = 1000;
// 在导入时环境允许自动初始化
if (!(typeof window === 'undefined' || typeof window.microApp === 'undefined' || typeof window.microApp.getData !== 'function')) {
    try {
        microAppData = window.microApp.getData();
    }
    catch (e) {
        console.warn('Failed to initialize DooTask tools:', e);
    }
}
/**
 * 检查当前应用是否为微前端应用
 * @returns {Promise<void>} 返回一个 Promise，当微前端应用准备好时解析
 */
var appReady = function () {
    return new Promise(function (resolve) {
        if (typeof window === 'undefined' || typeof window.microApp === 'undefined' || typeof window.microApp.getData !== 'function') {
            return;
        }
        if (!microAppReady) {
            microAppReady = true;
            microAppData = window.microApp.getData();
            resolve(microAppData);
        }
    });
};
exports.appReady = appReady;
/**
 * 检查当前应用是否为微前端应用
 * @returns {boolean} 如果当前应用是微前端应用，返回true；否则返回false
 */
var isMicroApp = function () {
    return !(typeof window === 'undefined' || typeof window.microApp === 'undefined' || typeof window.microApp.getData !== 'function');
};
exports.isMicroApp = isMicroApp;
/**
 * 获取应用数据
 * @param {string | null} key - 可选参数，指定要获取的数据键名
 * @returns {Any} 当不传key时返回全部共享数据；传key时返回对应值
 */
var getAppData = function (key) {
    var _a;
    if (key === void 0) { key = null; }
    if (!(0, exports.isMicroApp)()) {
        return null;
    }
    if (!microAppData && ((_a = window.microApp) === null || _a === void 0 ? void 0 : _a.getData)) {
        microAppData = window.microApp.getData();
    }
    if (!microAppData)
        return null;
    if (!key)
        return microAppData;
    return key.split('.').reduce(function (obj, k) {
        if (obj && typeof obj === 'object') {
            // 处理数组索引（如 items.0）
            var arrayIndex = /^\d+$/.test(k) ? parseInt(k) : k;
            // 使用类型断言解决动态索引的类型问题
            return obj[arrayIndex];
        }
        return null;
    }, microAppData);
};
exports.getAppData = getAppData;
// 直接导出属性变量
exports.props = {
    /** 当前主题名称 */
    themeName: (0, exports.getAppData)('props.themeName') || '',
    /** 当前用户ID */
    userId: Math.max(0, Number((0, exports.getAppData)('props.userId')) || 0),
    /** 当前用户Token */
    userToken: (0, exports.getAppData)('props.userToken') || '',
    /** 当前用户信息 */
    userInfo: (0, exports.getAppData)('props.userInfo') || null,
    /** 基础URL */
    baseUrl: (0, exports.getAppData)('props.baseUrl') || '',
    /** 系统信息 */
    systemInfo: (0, exports.getAppData)('props.systemInfo') || null,
    /** 页面类型 */
    windowType: (0, exports.getAppData)('props.windowType') || 'embed',
    /** 是否为EEUI应用 */
    isEEUIApp: !!(0, exports.getAppData)('props.isEEUIApp'),
    /** 是否为Electron应用 */
    isElectron: !!(0, exports.getAppData)('props.isElectron'),
    /** 是否为主Electron窗口 */
    isMainElectron: !!(0, exports.getAppData)('props.isMainElectron'),
    /** 是否为子Electron窗口 */
    isSubElectron: !!(0, exports.getAppData)('props.isSubElectron'),
    /** 语言列表 */
    languageList: (0, exports.getAppData)('props.languageList') || [],
    /** 当前语言名称 */
    languageName: (0, exports.getAppData)('props.languageName') || '',
    /** 获取原始属性字段 */
    get: function (key, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return (0, exports.getAppData)("props.".concat(key)) || defaultValue;
    }
};
// 兼容保留原来的方法
/**
 * 获取当前主题名称 (兼容方法)
 * @returns {string} 当前主题名称
 */
var getThemeName = function () {
    return exports.props.themeName;
};
exports.getThemeName = getThemeName;
/**
 * 获取当前用户ID (兼容方法)
 * @returns {number} 当前用户ID
 */
var getUserId = function () {
    return exports.props.userId;
};
exports.getUserId = getUserId;
/**
 * 获取当前用户Token (兼容方法)
 * @returns {string} 当前用户Token
 */
var getUserToken = function () {
    return exports.props.userToken;
};
exports.getUserToken = getUserToken;
/**
 * 获取当前用户信息 (兼容方法)
 * @returns {Any} 当前用户信息对象
 */
var getUserInfo = function () {
    return exports.props.userInfo;
};
exports.getUserInfo = getUserInfo;
/**
 * 获取基础URL (兼容方法)
 * @returns {string} 基础URL
 */
var getBaseUrl = function () {
    return exports.props.baseUrl;
};
exports.getBaseUrl = getBaseUrl;
/**
 * 获取系统信息 (兼容方法)
 * @returns {Any} 系统信息对象
 */
var getSystemInfo = function () {
    return exports.props.systemInfo;
};
exports.getSystemInfo = getSystemInfo;
/**
 * 获取页面类型 (兼容方法)
 * @returns {string} 页面类型，可能的值为 'popout' 或 'embed'
 */
var getWindowType = function () {
    return exports.props.windowType;
};
exports.getWindowType = getWindowType;
/**
 * 检查是否为EEUI应用 (兼容方法)
 * @returns {boolean} 是否为EEUI应用
 */
var isEEUIApp = function () {
    return exports.props.isEEUIApp;
};
exports.isEEUIApp = isEEUIApp;
/**
 * 检查是否为Electron应用 (兼容方法)
 * @returns {boolean} 是否为Electron应用
 */
var isElectron = function () {
    return exports.props.isElectron;
};
exports.isElectron = isElectron;
/**
 * 检查是否为主Electron窗口 (兼容方法)
 * @returns {boolean} 是否为主Electron窗口
 */
var isMainElectron = function () {
    return exports.props.isMainElectron;
};
exports.isMainElectron = isMainElectron;
/**
 * 检查是否为子Electron窗口 (兼容方法)
 * @returns {boolean} 是否为子Electron窗口
 */
var isSubElectron = function () {
    return exports.props.isSubElectron;
};
exports.isSubElectron = isSubElectron;
/**
 * 获取语言列表 (兼容方法)
 * @returns {Any[]} 语言列表
 */
var getLanguageList = function () {
    return exports.props.languageList;
};
exports.getLanguageList = getLanguageList;
/**
 * 获取当前语言名称 (兼容方法)
 * @returns {string} 当前语言名称
 */
var getLanguageName = function () {
    return exports.props.languageName;
};
exports.getLanguageName = getLanguageName;
// 直接导出方法变量
exports.methods = {
    /** 关闭当前应用 */
    close: function (destroy) {
        if (destroy === void 0) { destroy = false; }
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.close === 'function') {
            methodsData.close(destroy);
        }
    },
    /** 返回上一页 */
    back: function () {
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.back === 'function') {
            methodsData.back();
        }
    },
    /** 应用关闭前的回调
     * @param callback - 回调函数，返回true则阻止关闭，false则允许关闭
     * @description 用于在应用关闭前执行操作，可以通过返回true来阻止关闭
     * @returns 返回一个函数，执行该函数可以注销监听器
     */
    interceptBack: function (callback) {
        var _a;
        if ((_a = window.microApp) === null || _a === void 0 ? void 0 : _a.addDataListener) {
            var interceptListener_1 = function (data) {
                if (data && data.type === 'beforeClose') {
                    return callback(data);
                }
                return false;
            };
            window.microApp.addDataListener(interceptListener_1, false);
            // 返回注销监听的函数
            return function () {
                var _a;
                if ((_a = window.microApp) === null || _a === void 0 ? void 0 : _a.removeDataListener) {
                    window.microApp.removeDataListener(interceptListener_1);
                }
            };
        }
        // 如果没有添加监听，返回空函数
        return function () {
        };
    },
    /** 获取下一个模态框z-index */
    nextZIndex: function () {
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.nextZIndex === 'function') {
            return methodsData.nextZIndex();
        }
        return zIndexMissing++;
    },
    /** 选择用户 */
    selectUsers: function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var methodsData;
        return __generator(this, function (_a) {
            methodsData = (0, exports.getAppData)('methods');
            if (methodsData && typeof methodsData.selectUsers === 'function') {
                return [2 /*return*/, methodsData.selectUsers(params)];
            }
            return [2 /*return*/, null];
        });
    }); },
    /** 应用窗口独立显示 */
    popoutWindow: function (params) {
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.popoutWindow === 'function') {
            methodsData.popoutWindow(params);
        }
    },
    /** 打开新窗口（只在 isElectron 环境有效） */
    openWindow: function (params) {
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.openWindow === 'function') {
            methodsData.openWindow(params);
        }
    },
    /** 在新标签页打开URL（只在 isElectron 环境有效） */
    openTabWindow: function (url) {
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.openTabWindow === 'function') {
            methodsData.openTabWindow(url);
        }
    },
    /** 打开应用页面（只在 isEEUIApp 环境有效） */
    openAppPage: function (params) {
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.openAppPage === 'function') {
            methodsData.openAppPage(params);
        }
    },
    /** 请求服务器API */
    requestAPI: function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var dispatch;
        return __generator(this, function (_a) {
            dispatch = (0, exports.getAppData)('instance.store.dispatch');
            if (dispatch && typeof dispatch === 'function') {
                return [2 /*return*/, dispatch("call", params)];
            }
            else {
                throw new Error('requestAPI method not found');
            }
            return [2 /*return*/];
        });
    }); },
    /** 调用$A上的额外方法 */
    extraCallA: function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var methodsData = (0, exports.getAppData)('methods');
        if (methodsData && typeof methodsData.extraCallA === 'function') {
            return methodsData.extraCallA.apply(methodsData, __spreadArray([methodName], args, false));
        }
        return null;
    }
};
// 兼容保留原来的方法
/**
 * 关闭微前端应用 (兼容方法)
 * @param destroy - 可选参数，布尔值，表示是否销毁应用。默认为false。
 */
var closeApp = function (destroy) {
    if (destroy === void 0) { destroy = false; }
    exports.methods.close(destroy);
};
exports.closeApp = closeApp;
/**
 * 逐步返回上一个页面 (兼容方法)
 * @description 类似于浏览器的后退按钮，返回到最后一个页面时会关闭应用。
 */
var backApp = function () {
    exports.methods.back();
};
exports.backApp = backApp;
/**
 * 设置应用关闭前的回调 (兼容方法)
 * @param callback - 回调函数，返回true则阻止关闭，false则允许关闭
 * @description 用于在应用关闭前执行操作，可以通过返回true来阻止关闭
 * @returns 返回一个函数，执行该函数可以注销监听器
 */
var interceptBack = function (callback) {
    return exports.methods.interceptBack(callback);
};
exports.interceptBack = interceptBack;
/**
 * 获取下一个可用的模态框 z-index 值 (兼容方法)
 * @returns {number} 返回一个递增的 z-index 值
 */
var nextZIndex = function () {
    return exports.methods.nextZIndex();
};
exports.nextZIndex = nextZIndex;
/**
 * 应用窗口独立显示 (兼容方法)
 * @param params - 窗口参数
 */
var popoutWindow = function (params) {
    exports.methods.popoutWindow(params);
};
exports.popoutWindow = popoutWindow;
/**
 * 打开新窗口 (兼容方法)
 * @param params - 窗口参数
 * @description 只在 isElectron 环境有效
 */
var openWindow = function (params) {
    exports.methods.openWindow(params);
};
exports.openWindow = openWindow;
/**
 * 在新标签页打开URL (兼容方法)
 * @param url - 要打开的URL
 * @description 只在 isElectron 环境有效
 */
var openTabWindow = function (url) {
    exports.methods.openTabWindow(url);
};
exports.openTabWindow = openTabWindow;
/**
 * 打开应用页面 (兼容方法)
 * @param params - 应用页面参数
 * @description 只在 isEEUIApp 环境有效
 */
var openAppPage = function (params) {
    exports.methods.openAppPage(params);
};
exports.openAppPage = openAppPage;
/**
 * 请求服务器API (兼容方法)
 * @param params - API请求参数
 * @returns Promise 返回API请求结果
 */
var requestAPI = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, exports.methods.requestAPI(params)];
    });
}); };
exports.requestAPI = requestAPI;
/**
 * 调用$A上的额外方法 (兼容方法)
 * @param methodName - 方法名
 * @param args - 参数列表
 * @returns 方法返回值
 */
var callExtraA = function (methodName) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return exports.methods.extraCallA.apply(exports.methods, __spreadArray([methodName], args, false));
};
exports.callExtraA = callExtraA;
/**
 * 选择用户 (兼容方法)
 * @param params - 可以是值或配置对象
 * @returns Promise 返回选择的用户结果
 */
var selectUsers = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, exports.methods.selectUsers(params)];
    });
}); };
exports.selectUsers = selectUsers;
/**
 * 添加数据监听器
 * @param callback - 回调函数，当数据发生变化时调用
 * @param autoTrigger - 在初次绑定监听函数时如果有缓存数据，是否需要主动触发一次
 */
var addDataListener = function (callback, autoTrigger) {
    var _a;
    if (autoTrigger === void 0) { autoTrigger = false; }
    if ((_a = window.microApp) === null || _a === void 0 ? void 0 : _a.addDataListener) {
        window.microApp.addDataListener(callback, autoTrigger);
    }
};
exports.addDataListener = addDataListener;
/**
 * 移除数据监听器
 * @param callback - 回调函数，之前添加的监听器
 */
var removeDataListener = function (callback) {
    var _a;
    if ((_a = window.microApp) === null || _a === void 0 ? void 0 : _a.removeDataListener) {
        window.microApp.removeDataListener(callback);
    }
};
exports.removeDataListener = removeDataListener;
