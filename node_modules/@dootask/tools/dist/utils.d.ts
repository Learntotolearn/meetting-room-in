import { Any, Func, MicroAppData, OpenAppPageParams, OpenWindowParams, PopoutWindowParams, SelectUsersParams, requestParams, responseSuccess, responseError } from './types';
/**
 * 检查当前应用是否为微前端应用
 * @returns {Promise<void>} 返回一个 Promise，当微前端应用准备好时解析
 */
export declare const appReady: () => Promise<MicroAppData>;
/**
 * 检查当前应用是否为微前端应用
 * @returns {boolean} 如果当前应用是微前端应用，返回true；否则返回false
 */
export declare const isMicroApp: () => boolean;
/**
 * 获取应用数据
 * @param {string | null} key - 可选参数，指定要获取的数据键名
 * @returns {Any} 当不传key时返回全部共享数据；传key时返回对应值
 */
export declare const getAppData: (key?: string | null) => Any;
export declare const props: {
    /** 当前主题名称 */
    themeName: any;
    /** 当前用户ID */
    userId: number;
    /** 当前用户Token */
    userToken: any;
    /** 当前用户信息 */
    userInfo: any;
    /** 基础URL */
    baseUrl: any;
    /** 系统信息 */
    systemInfo: any;
    /** 页面类型 */
    windowType: any;
    /** 是否为EEUI应用 */
    isEEUIApp: boolean;
    /** 是否为Electron应用 */
    isElectron: boolean;
    /** 是否为主Electron窗口 */
    isMainElectron: boolean;
    /** 是否为子Electron窗口 */
    isSubElectron: boolean;
    /** 语言列表 */
    languageList: any;
    /** 当前语言名称 */
    languageName: any;
    /** 获取原始属性字段 */
    get: (key: string, defaultValue?: Any) => Any;
};
/**
 * 获取当前主题名称 (兼容方法)
 * @returns {string} 当前主题名称
 */
export declare const getThemeName: () => string;
/**
 * 获取当前用户ID (兼容方法)
 * @returns {number} 当前用户ID
 */
export declare const getUserId: () => number;
/**
 * 获取当前用户Token (兼容方法)
 * @returns {string} 当前用户Token
 */
export declare const getUserToken: () => string;
/**
 * 获取当前用户信息 (兼容方法)
 * @returns {Any} 当前用户信息对象
 */
export declare const getUserInfo: () => Any;
/**
 * 获取基础URL (兼容方法)
 * @returns {string} 基础URL
 */
export declare const getBaseUrl: () => string;
/**
 * 获取系统信息 (兼容方法)
 * @returns {Any} 系统信息对象
 */
export declare const getSystemInfo: () => Any;
/**
 * 获取页面类型 (兼容方法)
 * @returns {string} 页面类型，可能的值为 'popout' 或 'embed'
 */
export declare const getWindowType: () => string;
/**
 * 检查是否为EEUI应用 (兼容方法)
 * @returns {boolean} 是否为EEUI应用
 */
export declare const isEEUIApp: () => boolean;
/**
 * 检查是否为Electron应用 (兼容方法)
 * @returns {boolean} 是否为Electron应用
 */
export declare const isElectron: () => boolean;
/**
 * 检查是否为主Electron窗口 (兼容方法)
 * @returns {boolean} 是否为主Electron窗口
 */
export declare const isMainElectron: () => boolean;
/**
 * 检查是否为子Electron窗口 (兼容方法)
 * @returns {boolean} 是否为子Electron窗口
 */
export declare const isSubElectron: () => boolean;
/**
 * 获取语言列表 (兼容方法)
 * @returns {Any[]} 语言列表
 */
export declare const getLanguageList: () => Any[];
/**
 * 获取当前语言名称 (兼容方法)
 * @returns {string} 当前语言名称
 */
export declare const getLanguageName: () => string;
export declare const methods: {
    /** 关闭当前应用 */
    close: (destroy?: boolean) => void;
    /** 返回上一页 */
    back: () => void;
    /** 应用关闭前的回调
     * @param callback - 回调函数，返回true则阻止关闭，false则允许关闭
     * @description 用于在应用关闭前执行操作，可以通过返回true来阻止关闭
     * @returns 返回一个函数，执行该函数可以注销监听器
     */
    interceptBack: (callback: (data: Any) => boolean) => (() => void);
    /** 获取下一个模态框z-index */
    nextZIndex: () => number;
    /** 选择用户 */
    selectUsers: (params: SelectUsersParams) => Promise<Any>;
    /** 应用窗口独立显示 */
    popoutWindow: (params?: PopoutWindowParams) => void;
    /** 打开新窗口（只在 isElectron 环境有效） */
    openWindow: (params: OpenWindowParams) => void;
    /** 在新标签页打开URL（只在 isElectron 环境有效） */
    openTabWindow: (url: string) => void;
    /** 打开应用页面（只在 isEEUIApp 环境有效） */
    openAppPage: (params: OpenAppPageParams) => void;
    /** 请求服务器API */
    requestAPI: (params: requestParams) => Promise<responseSuccess | responseError>;
    /** 调用$A上的额外方法 */
    extraCallA: (methodName: string, ...args: Any[]) => Any;
};
/**
 * 关闭微前端应用 (兼容方法)
 * @param destroy - 可选参数，布尔值，表示是否销毁应用。默认为false。
 */
export declare const closeApp: (destroy?: boolean) => void;
/**
 * 逐步返回上一个页面 (兼容方法)
 * @description 类似于浏览器的后退按钮，返回到最后一个页面时会关闭应用。
 */
export declare const backApp: () => void;
/**
 * 设置应用关闭前的回调 (兼容方法)
 * @param callback - 回调函数，返回true则阻止关闭，false则允许关闭
 * @description 用于在应用关闭前执行操作，可以通过返回true来阻止关闭
 * @returns 返回一个函数，执行该函数可以注销监听器
 */
export declare const interceptBack: (callback: (data: Any) => boolean) => (() => void);
/**
 * 获取下一个可用的模态框 z-index 值 (兼容方法)
 * @returns {number} 返回一个递增的 z-index 值
 */
export declare const nextZIndex: () => number;
/**
 * 应用窗口独立显示 (兼容方法)
 * @param params - 窗口参数
 */
export declare const popoutWindow: (params?: PopoutWindowParams) => void;
/**
 * 打开新窗口 (兼容方法)
 * @param params - 窗口参数
 * @description 只在 isElectron 环境有效
 */
export declare const openWindow: (params: OpenWindowParams) => void;
/**
 * 在新标签页打开URL (兼容方法)
 * @param url - 要打开的URL
 * @description 只在 isElectron 环境有效
 */
export declare const openTabWindow: (url: string) => void;
/**
 * 打开应用页面 (兼容方法)
 * @param params - 应用页面参数
 * @description 只在 isEEUIApp 环境有效
 */
export declare const openAppPage: (params: OpenAppPageParams) => void;
/**
 * 请求服务器API (兼容方法)
 * @param params - API请求参数
 * @returns Promise 返回API请求结果
 */
export declare const requestAPI: (params: requestParams) => Promise<responseSuccess | responseError>;
/**
 * 调用$A上的额外方法 (兼容方法)
 * @param methodName - 方法名
 * @param args - 参数列表
 * @returns 方法返回值
 */
export declare const callExtraA: (methodName: string, ...args: Any[]) => Any;
/**
 * 选择用户 (兼容方法)
 * @param params - 可以是值或配置对象
 * @returns Promise 返回选择的用户结果
 */
export declare const selectUsers: (params: SelectUsersParams) => Promise<Any>;
/**
 * 添加数据监听器
 * @param callback - 回调函数，当数据发生变化时调用
 * @param autoTrigger - 在初次绑定监听函数时如果有缓存数据，是否需要主动触发一次
 */
export declare const addDataListener: (callback: Func, autoTrigger?: boolean) => void;
/**
 * 移除数据监听器
 * @param callback - 回调函数，之前添加的监听器
 */
export declare const removeDataListener: (callback: Func) => void;
