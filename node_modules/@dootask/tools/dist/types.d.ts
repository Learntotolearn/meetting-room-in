/**
 * 微应用数据类型定义
 */
export type Any = any;
export type Func = Function;
export interface MicroAppInstance {
    Vue: Any;
    store: Any;
    components: {
        DialogWrapper: Any;
        UserSelect: Any;
        DatePicker: Any;
        [key: string]: Any;
    };
}
export interface MicroAppProps {
    userId: number;
    userToken: string;
    userInfo: Any;
    baseUrl: string;
    systemInfo: Any;
    windowType: 'popout' | 'embed';
    isEEUIApp: boolean;
    isElectron: boolean;
    isMainElectron: boolean;
    isSubElectron: boolean;
    languageList: Any[];
    languageName: string;
    themeName: string;
    [key: string]: Any;
}
export interface MicroAppMethods {
    close: (destroy?: boolean) => void;
    back: () => void;
    interceptBack: (callback: (data: Any) => boolean) => (() => void);
    nextZIndex: () => number;
    selectUsers: (params: SelectUsersParams) => Promise<Any>;
    openWindow: (params: OpenWindowParams) => void;
    openTabWindow: (url: string) => void;
    openAppPage: (params: OpenAppPageParams) => void;
    extraCallA: (...args: Any[]) => Any;
    [key: string]: Any;
}
export interface MicroAppData {
    type: string;
    instance: MicroAppInstance;
    props: MicroAppProps;
    methods: MicroAppMethods;
}
export interface WindowConfig {
    title?: string;
    titleFixed?: boolean;
    width?: number;
    height?: number;
    minWidth?: number;
    [key: string]: Any;
}
export interface PopoutWindowParams extends WindowConfig {
    url?: string;
    [key: string]: Any;
}
export interface OpenWindowParams {
    name?: string;
    url?: string;
    force?: boolean;
    config?: WindowConfig;
    [key: string]: Any;
}
export interface OpenAppPageParams {
    title?: string;
    titleFixed?: boolean;
    url?: string;
    [key: string]: Any;
}
export interface SelectUsersParams {
    value?: string | number | Array<Any>;
    uncancelable?: Array<Any>;
    disabledChoice?: Array<Any>;
    projectId?: number;
    noProjectId?: number;
    dialogId?: number;
    showBot?: boolean;
    showDisable?: boolean;
    multipleMax?: number;
    title?: string;
    placeholder?: string;
    showSelectAll?: boolean;
    showDialog?: boolean;
    onlyGroup?: boolean;
    beforeSubmit?: Func;
    [key: string]: Any;
}
export interface requestParams {
    url: string;
    method?: string;
    data?: Any;
    timeout?: number;
    header?: Any;
    spinner?: boolean;
    [key: string]: Any;
}
export interface responseSuccess {
    msg: string;
    data: Any;
    xhr: Any;
    [key: string]: Any;
}
export interface responseError {
    ret: number;
    msg: string;
    data: Any;
    [key: string]: Any;
}
declare global {
    interface Window {
        microApp?: {
            getData: () => MicroAppData;
            addDataListener: (callback: Func, autoTrigger?: boolean) => void;
            removeDataListener: (callback: Func) => void;
        };
        modalTransferIndex?: number;
        systemInfo?: Any;
    }
}
